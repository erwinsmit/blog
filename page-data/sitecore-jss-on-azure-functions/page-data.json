{"componentChunkName":"component---src-templates-blog-post-js","path":"/sitecore-jss-on-azure-functions/","webpackCompilationHash":"a8d62280f1fd0ee764bb","result":{"data":{"site":{"siteMetadata":{"title":"Erwin Smit blog","author":"Erwin Smit"}},"markdownRemark":{"id":"21d73394-5f83-5514-8294-c717c37e97da","html":"<p>As described in a previous post, we managed to host Next.js using a custom server in <a href=\"/nextjs-on-azure-functions/\">Azure Functions</a>. Now let’s see if this also works for Sitecore JSS. </p>\n<h2 id=\"frontend-only\"><a href=\"#frontend-only\" aria-label=\"frontend only permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontend only</h2>\n<p>For just the public facing part it was no problem, the exact same code as used in the custom server <a href=\"/nextjs-on-azure-functions/\">previously</a> worked fine.\nHowever to get the experience editor working we faced some challenges.</p>\n<h2 id=\"experience-editor\"><a href=\"#experience-editor\" aria-label=\"experience editor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Experience editor</h2>\n<p>To get the Experience editor to work we have to do some more work. Mainly because the Next.js <a href=\"https://github.com/Sitecore/jss/tree/dev/samples/nextjs/src/pages/api/editing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API routes</a> are not supported when using a <a href=\"https://nextjs.org/docs/advanced-features/custom-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">custom server</a>.</p>\n<p>Luckily these routes are easy to replicate using Azure Functions. So we created two Azure Functions that serves the:</p>\n<ul>\n<li>Editing Render Middleware</li>\n<li>Editing Data Middleware</li>\n</ul>\n<p>Why do you need two endpoints for the Experience editor? This is to enable the <strong><a href=\"https://nextjs.org/docs/advanced-features/preview-mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Preview mode</a></strong> in Next.js. The preview mode bypasses all the clever stuff like <strong>ISG</strong> (Incremental Static Generation).\nHow these endpoints work together is explained well in the <a href=\"https://jss.sitecore.com/docs/nextjs/experience-editor/architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSS Docs</a>.</p>\n<p>Implementing these endpoints was done with the following code, this example is for the <a href=\"https://github.com/Sitecore/jss/blob/dev/packages/sitecore-jss-nextjs/src/middleware/editing-render-middleware.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Editing Render Middleware</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AzureFunction<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">,</span> HttpRequest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@azure/functions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EditingRenderMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@sitecore-jss/sitecore-jss-nextjs/middleware'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> httpTrigger<span class=\"token punctuation\">:</span> <span class=\"token function-variable function\">AzureFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">:</span> Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">:</span> HttpRequest</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EditingRenderMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            status<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> httpTrigger<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"response-handler\"><a href=\"#response-handler\" aria-label=\"response handler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Response handler</h3>\n<p>The problem is that the response from Azure does not contain the same methods as Vercel. An <a href=\"https://github.com/Sitecore/jss/blob/dev/packages/sitecore-jss-nextjs/src/middleware/editing-render-middleware.ts#L86\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example</a> is seen here:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">405</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    html<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;html>&lt;body>Invalid request method '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'&lt;/body>&lt;/html>`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Azure Functions will return errors that these methods don’t exist. These methods are used throughout the Middlewares from Sitecore JSS. Do we need to replace all those middlewares? That would be a lot of work.</p>\n<p>The easiest fix was to create a function that transforms all the Vercel specific functions to a format Azure understands. So we created a Responsehandler function that accepts the Azure Function context and attaches the Vercel specific functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getNextResponseHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">:</span> Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> nextContextRes <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">;</span>\n\n    nextContextRes<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">status</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">statusCode<span class=\"token punctuation\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        nextContextRes<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> statusCode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> nextContextRes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    nextContextRes<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setPreviewData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">previewData<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> manifest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.next/prerender-manifest.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> <span class=\"token function\">setPreviewData</span><span class=\"token punctuation\">(</span>previewData<span class=\"token punctuation\">,</span> manifest<span class=\"token punctuation\">.</span>preview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nextContextRes<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">:</span> cookies<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json; charset=utf-8\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\netc etc<span class=\"token operator\">...</span></code></pre></div>\n<p>Now this method can be used within the Azure Function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nextResponseHandler <span class=\"token operator\">=</span> <span class=\"token function\">getNextResponseHandler</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>customContextReq<span class=\"token punctuation\">,</span> nextResponseHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Creating the <code class=\"language-text\">setPreview</code> method was a pain. Because the correct functions are not <a href=\"https://github.com/vercel/next.js/blob/5ddee4494bf1fbcfd91ce81bc59f8de66949c9fc/packages/next/server/api-utils.ts#L420\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">exposed by Next.js</a>. For this reason I ended up doing quite a bit of copy-pasting from the Next.js repository to get it to work. </p>\n<h3 id=\"editing-data-cache\"><a href=\"#editing-data-cache\" aria-label=\"editing data cache permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editing data cache</h3>\n<p>Another issue we faced was the caching middleware throwing errors. After some digging the <a href=\"https://github.com/Sitecore/jss/blob/dev/packages/sitecore-jss-nextjs/src/middleware/editing-data-cache.ts#L24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">following line</a> caused an issue:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use gzip compression and store using the OS temp directory (Vercel Serverless Functions have temp directory access)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cache</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing-data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> compression<span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">tmpdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">os.tempdir()</code> was pointing to a directory where a Consumption Based Azure Function was not allowed to read/write to. </p>\n<p>To resolve this, we created a custom EditingDataCache middleware function that sets a different directory. That middleware is added as a parameter to the EditingDataMiddleWare:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EditingDataMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    editingDataCache<span class=\"token punctuation\">:</span> editingDataDiskCache\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It would be nice if this directory could be set as a parameter to the existing EditingDataDiskCache class. Hopefully, this <a href=\"https://github.com/Sitecore/jss/pull/839\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> will sort that out. </p>\n<h2 id=\"tell-sitecore-where-to-look-for-the-azure-function\"><a href=\"#tell-sitecore-where-to-look-for-the-azure-function\" aria-label=\"tell sitecore where to look for the azure function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tell Sitecore where to look for the Azure Function</h2>\n<p>Finally tell sitecore where to look for the Azure Function. This can be done in the config files of the Sitecore instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jss-nextjs-app<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">...</span>\n    <span class=\"token attr-name\">serverSideRenderingEngineEndpointUrl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://${yourfunctionapp}.azurewebsites.net/api/editing/render<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">serverSideRenderingEngineApplicationUrl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://${yourfunctionapp}.azurewebsites.net/<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>That’s it, those were the problems we faced. Hopefully this could be helpful for anyone else facing similar issues. </p>","timeToRead":4,"frontmatter":{"title":"Sitecore JSS on Azure Functions","date":"October 27, 2021","spoiler":"Steps required"},"fields":{"slug":"/sitecore-jss-on-azure-functions/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/sitecore-jss-on-azure-functions/","previous":{"fields":{"slug":"/deploy-azure-functions-github-actions/","langKey":"en","directoryName":"deploy-azure-functions-github-actions"},"frontmatter":{"title":"Deploy Azure Functions with GitHub Actions using AzCopy"}},"next":{"fields":{"slug":"/add-external-datasource-to-sitecore-jss/","langKey":"en","directoryName":"add-external-datasource-to-sitecore-jss"},"frontmatter":{"title":"Add external datasource to Sitecore JSS"}},"translations":[],"translatedLinks":[]}}}