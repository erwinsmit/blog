{"componentChunkName":"component---src-templates-blog-post-js","path":"/nextjs-on-azure-functions/","webpackCompilationHash":"5a524d401de770e8abeb","result":{"data":{"site":{"siteMetadata":{"title":"Erwin Smit blog","author":"Erwin Smit"}},"markdownRemark":{"id":"75dedcd2-a00b-5c57-a8a7-54ae68b59d28","html":"<p>Next.js is a great framework for creating react applications. I was always a fan of <strong>SSG (Static Site Generation)</strong> using for example Gatsby (this blog is using Gatsby too).\nWebsites using <strong>SSG</strong> have low hosting costs. No computing power is needed for rendering stuff to the end-user. With the great tooling available it still feels dynamic, you can still use a CMS, you just need to run a new build when some content has changed.</p>\n<p>This is all great but when you make content changes all the time it is not that scalable. Sometimes you also still need SSR (Server Side Rendering). With Next.js you can have both at the same time! For me the key advantages of Next.js are:</p>\n<ul>\n<li><strong>SSG</strong> (Build pages as static assets on build-time)</li>\n<li><strong>SSR</strong> (Serve pages server-side rendered on request)</li>\n<li><strong>ISG</strong> (Incremental Static Generation) </li>\n</ul>\n<p><strong>ISG</strong> is a great feature, a page that is statically rendered using SSG can still update on request when the <a href=\"https://nextjs.org/docs/basic-features/data-fetching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>revalidate</em></a> time on a page has expired. A real-life scenario would be:</p>\n<ol>\n<li>User 1 requests the “/contact” page where revalidate is set to 10 (seconds). The page is not generated on build time so a static asset is created on the server containing the HTML.</li>\n<li>User 2 enters the contact page a few seconds later, it will receive the statically generated HTML triggered by event <strong>1</strong> above.</li>\n<li>User 1 refreshes the page 10 seconds later, the page will update itself and will be served as a static asset to the next user that enters the page within 10 seconds.</li>\n</ol>\n<p>With the use case described above, you wonder why you would ever need SSR. I’m also not sure when you still need it, you could say it’s necessary when the content is unique per visitor (price information for example).\nBut if that’s the case, you could also fetch the data using client-side calls, unique content specifically for a user should not be important for SEO. </p>\n<p>At Macaw we build a lot of stuff with Sitecore so I’m excited to see Sitecore JSS supports Next.js out of the box! However, there are some challenges…</p>\n<h2 id=\"hosting-nextjs-without-vercel\"><a href=\"#hosting-nextjs-without-vercel\" aria-label=\"hosting nextjs without vercel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hosting Next.js without Vercel</h2>\n<p>Next.js recommends you host your Next.js application on Vercel, this makes perfect sense because Vercel is the company behind Next.js. In Vercel you simply link your Next.js Github repository, click next a few times and you have a Next.js site up and running!</p>\n<p>Most of our clients already pay for an Azure subscription, so it doesn’t always make sense for the clients to also pay for Vercel. This makes their IT landscape less consistent. </p>\n<p>Also the pricing is hard to calculate. For a developer creating a hobby website, it’s free which is great. For a bit more bandwidth you pay $20 per member (I assume developer team member). Anything above that is a big mystery because you will fall into the Enterprise bracket. I heard some mixed <a href=\"https://www.reddit.com/r/nextjs/comments/ikr8jv/understanding_optimizing_nextjs_usage_on_vercel/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">experiences</a> about that.</p>\n<p>In other projects, we learned that you get the most bang for buck performance hosting your application in (consumption-based) Azure Functions. You only pay for the number of requests you get and it can scale up to infinity. </p>\n<p>So how do you run Next.js on an Azure function? We decided to figure this out first with a basic Next.js website before diving into the Sitecore JSS implementation. </p>\n<h2 id=\"nextjs-custom-server-within-an-azure-function\"><a href=\"#nextjs-custom-server-within-an-azure-function\" aria-label=\"nextjs custom server within an azure function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js custom server within an Azure Function</h2>\n<p>Our project is set up with Lerna using the following folder structure:</p>\n<ul>\n<li><code class=\"language-text\">packages/nextjs-app</code></li>\n<li><code class=\"language-text\">packages/nextjs-azure-functions</code></li>\n</ul>\n<p>Within the <code class=\"language-text\">nextjs-app</code> package we have an app generated by default using the Next.JS CLI. For demonstration purposes, we have a page that’s generated using <code class=\"language-text\">getServerSideProps</code> for SSR and a page using <code class=\"language-text\">getStaticProps</code> for SSG. </p>\n<p>In the <code class=\"language-text\">nextjs-azure-functions</code> we have created a function for the custom server. The custom server is based on the examples provided by Next.js and placed in the context of an Azure Function. A custom server is required because you can’t just run <code class=\"language-text\">next start</code> within an Azure Function. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">:</span> Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">:</span> HttpRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        app <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n            dev<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>        \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handle <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>params<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>remainingPath <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>params<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>remainingPath <span class=\"token operator\">!==</span> <span class=\"token string\">\"nextjsserver\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>params<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>remainingPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"/index\"</span>\n    \n    <span class=\"token keyword\">const</span> protocol <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"https://\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> parsedUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>protocol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WEBSITE_HOSTNAME</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This fixes the \"__nextlocale of undefined\" error</span>\n    parsedUrl<span class=\"token punctuation\">.</span>search <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req <span class=\"token keyword\">as</span> unknown <span class=\"token keyword\">as</span> IncomingMessage<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>res <span class=\"token keyword\">as</span> unknown <span class=\"token keyword\">as</span> ServerResponse<span class=\"token punctuation\">,</span> parsedUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            status<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token punctuation\">:</span> path <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The main challenge here was to add support for the routing, this is solved using the <code class=\"language-text\">remainingPath</code> parameter. This parameter is passed to the Azure Function using the <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-proxies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">proxies.json</a></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://json.schemastore.org/proxies\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"proxies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"rootpaths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"disabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"matchCondition\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"methods\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPTIONS\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"route\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"{*remainingPath}\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"backendUri\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://localhost/nextjsserver/{remainingPath}\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>Using this proxy the subpath after the baseurl is passed as a parameter. So when <a href=\"https://nextjsapp.com/category/tv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjsapp.com/category/tv</a> is requested <code class=\"language-text\">category/tv</code> will be the parameter passed to the Azure Function. Great, this works! </p>\n<p>But… The static assets from Next.js are not showing up. E.g. when <code class=\"language-text\">_next/static/css/0c24874fa9ebf63f8a34.css</code> is requested, it will try to render a route within Next.js instead of serving the static file. </p>\n<h2 id=\"resolving-static-assets\"><a href=\"#resolving-static-assets\" aria-label=\"resolving static assets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolving static assets</h2>\n<p>Also, this challenge can be solved with proxies:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://json.schemastore.org/proxies\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"proxies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"staticFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"disabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"matchCondition\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"methods\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPTIONS\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"route\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"_next/static/{*path}\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"backendUri\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://localhost/serveStaticFile?path={path}\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this configuration, we catch all the requests that start with <code class=\"language-text\">next/static</code> and catch everything after that in a parameter called path. This parameter is passed to an azure function called <code class=\"language-text\">serveStaticFile</code> which looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Context<span class=\"token punctuation\">,</span> HttpRequest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@azure/functions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>promises<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nextPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../basic-nextjs-example/.next/BUILD_ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">:</span> Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">:</span> HttpRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> staticFilePath <span class=\"token operator\">=</span> req<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>query<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>nextPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"static\"</span><span class=\"token punctuation\">,</span> staticFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            body<span class=\"token punctuation\">:</span> data\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            body<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`File not found </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example could be more sophisticated with the inclusion of the Content-Type header. But the modern browsers seem to handle this fine. </p>\n<h2 id=\"choosing-the-right-cdn\"><a href=\"#choosing-the-right-cdn\" aria-label=\"choosing the right cdn permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choosing the right CDN</h2>\n<p>While picking the CDN for your Azure Function it’s important to pick one that supports this Response Header correctly: </p>\n<p><code class=\"language-text\">cache-control: s-maxage=10,stale-while-revalidate</code></p>\n<p>You want the s-maxage value to be the same value as configured for <code class=\"language-text\">revalidate</code> in <code class=\"language-text\">getStaticProps</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// static site generation...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://baconipsum.com/api/?type=meat-and-filler'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> meats <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            meats<span class=\"token punctuation\">,</span>\n            date<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        revalidate<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not all <a href=\"https://docs.microsoft.com/en-us/azure/cdn/cdn-features\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CDN’s</a> in Azure support this. Only <code class=\"language-text\">Standard Microsoft</code> and <code class=\"language-text\">Premium Verizon</code> support this feature currently.</p>\n<h2 id=\"whats-next\"><a href=\"#whats-next\" aria-label=\"whats next permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s next?</h2>\n<p>This is my first post about my investigation on Next.js on azure and Sitecore JSS. Coming up are posts about:</p>\n<ul>\n<li>Deploying Azure Functions using Github actions</li>\n<li>Sitecore JSS on azure functions</li>\n<li>Creating components in Sitecore JSS</li>\n<li>Integrate Sitecore OrderCloud and other services in Sitecore JSS</li>\n</ul>","timeToRead":6,"frontmatter":{"title":"Next.js on Azure Functions","date":"October 13, 2021","spoiler":"How to set up a Next.js custom server hosted on Azure Functions"},"fields":{"slug":"/nextjs-on-azure-functions/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nextjs-on-azure-functions/","previous":{"fields":{"slug":"/speed-up-your-sitecore-react-implementation/","langKey":"en","directoryName":"speed-up-your-sitecore-react-implementation"},"frontmatter":{"title":"Speed up your Sitecore React implementation"}},"next":{"fields":{"slug":"/deploy-azure-functions-github-actions/","langKey":"en","directoryName":"deploy-azure-functions-github-actions"},"frontmatter":{"title":"Deploy Azure Functions with GitHub Actions using AzCopy"}},"translations":[],"translatedLinks":[]}}}