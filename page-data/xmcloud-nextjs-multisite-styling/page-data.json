{"componentChunkName":"component---src-templates-blog-post-js","path":"/xmcloud-nextjs-multisite-styling/","webpackCompilationHash":"a8d62280f1fd0ee764bb","result":{"data":{"site":{"siteMetadata":{"title":"Erwin Smit blog","author":"Erwin Smit"}},"markdownRemark":{"id":"52946766-a648-5d5a-be4f-21be3c768d20","html":"<p>I started working on an interesting Sitecore headless project, so it’s time to start blogging about my findings again!\nCurrently, I’m working on a project where a SXA multisite setup is migrated to XM Cloud.</p>\n<p>Handling the multisite setup is now very easy thanks to the <a href=\"https://doc.sitecore.com/xp/en/developers/hd/21/sitecore-headless-development/the-next-js-multisite-add-on.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">multisite Next.js addon</a> provided by the JSS team. </p>\n<p>However, one thing I can’t find in the documentation, how do you use a specific stylesheet for each SXA site?\nWe are leaving the styling as-is, so I want to load the existing SCSS files into Next.js.</p>\n<p>In Next.js you can add your SCSS to the application with a simple import:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'scss/styles.scss'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> AppProps<span class=\"token operator\">&lt;</span>SitecorePageProps<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dictionary<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pageProps<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>I18nProvider lngDict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dictionary<span class=\"token punctuation\">}</span> locale<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pageProps<span class=\"token punctuation\">.</span>locale<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>I18nProvider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem I have here, you only know which site you are on <strong>within</strong> the App function. And within the App function, it’s not possible to import SCSS. With a couple of steps, I have worked around this.</p>\n<h2 id=\"1-build-your-scss-yourself\"><a href=\"#1-build-your-scss-yourself\" aria-label=\"1 build your scss yourself permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Build your SCSS yourself</h2>\n<p>Instead of using Next.js to build the SCSS, setup a webpack file yourself:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteA<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./scss/siteA/main.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        siteB<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./scss/siteB/main.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Using MiniCssExtractPlugin to write the output to its own file.</span>\n                test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.scss$/</span><span class=\"token punctuation\">,</span>\n                use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        loader<span class=\"token punctuation\">:</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">{</span>\n                        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                            importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">{</span>\n                        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">{</span>\n                        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">,</span>\n                        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                            implementation<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            \n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">filename</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> chunk <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunk<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/js/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/css/'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.css`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now add the following tasks to your package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build:scss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf public/static &amp;&amp; webpack --config webpack.scss.config.js --mode production\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scss:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf public/static &amp;&amp; webpack --config webpack.scss.config.js --mode development --watch\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Add the watch and build tasks to the existing start and build scripts so they are run during development and build:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm-run-all --serial bootstrap next:build build:scss\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"start:connected\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm-run-all --serial bootstrap --parallel next:dev start:watch-components scss:watch\"</span><span class=\"token punctuation\">,</span>    </code></pre></div>\n<p>As you notice I am using the <code class=\"language-text\">public/static</code> directory for build assets, so it’s a good idea to add <code class=\"language-text\">public/static</code> to your .gitignore file and remove the directory on each build (using <a href=\"https://www.npmjs.com/package/rimraf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rimraf</a> in the example).</p>\n<p>In the <code class=\"language-text\">_app.tsx</code> you can now refer to the correct stylesheet based on the SXA site:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* eslint-disable @next/next/no-css-tags */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> AppProps<span class=\"token operator\">&lt;</span>SitecorePageProps<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dictionary<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pageProps<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`/static/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>pageProps<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.css`</span></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span></code></pre></div>\n<p>I added the <code class=\"language-text\">/* eslint-disable @next/next/no-css-tags */</code> line because <a href=\"https://nextjs.org/docs/messages/no-css-tags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js doesn’t like it</a> when you add CSS with a regular stylesheet link. I think this is silly, we have been adding stylesheets this way for 20 years. So I have no problem using this eslint-disable line. I’m also not seeing any performance concerns here.</p>\n<h2 id=\"2-what-about-caching\"><a href=\"#2-what-about-caching\" aria-label=\"2 what about caching permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. What about caching?</h2>\n<p>By default the public directory from Next.js does not cache, see my <a href=\"https://www.erwinsmit.com/caching-nextjs-public-directory/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">previous blog post</a> on how to resolve that. How do you make sure users don’t see a stale version when new CSS is deployed?</p>\n<p>First, I tried to use the <code class=\"language-text\">BUILD_ID</code> (located in the .next directory) from Next as a prefix to the CSS path. However, that can’t be accessed on build-time because the <code class=\"language-text\">BUILD_ID</code> is not generated until the build is actually complete. </p>\n<p>So instead, I decided to use the current <strong>commit hash</strong>, meaning that with each build there will automatically be a fresh CSS file with a long cache-header. </p>\n<p>First, create a script that returns a short version of the commit hash:</p>\n<p><strong>getCommitHash.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCommitHash</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git log --pretty=format:\"%h\" -n1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> getCommitHash<span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the webpack config responsible for building the CSS, place the CSS files in a path containing the commit hash:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        siteA<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./scss/siteA/main.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        siteB<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./scss/siteB/main.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/static'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getCommitHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Expose the commit hash as an environment variable in the next.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nextConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  env<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PUBLIC_URL</span><span class=\"token punctuation\">:</span> publicUrl<span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">COMMIT_HASH</span><span class=\"token punctuation\">:</span> <span class=\"token function\">getCommitHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>And refer to this environment variable in the _app.tsx:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> AppProps<span class=\"token operator\">&lt;</span>SitecorePageProps<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dictionary<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pageProps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`/static/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMIT_HASH</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>pageProps<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.css`</span></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span></code></pre></div>\n<p>That’s it! Now you have a unique stylesheet on each SXA site without any caching problems. Hope you find it useful. </p>","timeToRead":4,"frontmatter":{"title":"Sitecore XM Cloud multisite styling","date":"January 17, 2024","spoiler":"How do you conditionally render a stylesheet based on the SXA site"},"fields":{"slug":"/xmcloud-nextjs-multisite-styling/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/xmcloud-nextjs-multisite-styling/","previous":{"fields":{"slug":"/bullet-proof-frontend-stack-2023/","langKey":"en","directoryName":"bullet-proof-frontend-stack-2023"},"frontmatter":{"title":"My frontend stack in 2023"}},"next":null,"translations":[],"translatedLinks":[]}}}