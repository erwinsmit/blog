{"componentChunkName":"component---src-templates-blog-post-js","path":"/speed-up-sitecore-jss-nextjs-local-development/","webpackCompilationHash":"a8d62280f1fd0ee764bb","result":{"data":{"site":{"siteMetadata":{"title":"Erwin Smit blog","author":"Erwin Smit"}},"markdownRemark":{"id":"ba0132d1-d6b6-5003-96c4-89377f281b76","html":"<p>Sitecore developers are traditionally .NET developers and .NET developers traditionally use Windows for their local development environments.\nHowever, for running Next.js applications locally, Windows is not the best OS in my opinion. Everything that runs with Node will likely perform better on a Linux system. </p>\n<p>But, for a while, it’s possible to run a Linux environment on Windows using WSL. Setting WSL up for your development setup is done with the following steps: </p>\n<ol>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Install WSL</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Set up WSL for VScode</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Set up Node using NVM</a></li>\n</ol>\n<p><strong>Make sure your projects are installed in your ~/projects directory (not in /mnt, performance is awful in the /mnt directory)</strong></p>\n<p>To be honest I don’t have any hard evidence that running your projects on Linux is actually faster, I just had a feeling it always was.\nLet’s do some tests and see if (and how) much difference it actually makes.</p>\n<p>Recently I worked on a Sitecore JSS Next.js project where the codebase is pretty big, with a lot of content, and lots of components using a Monorepo.</p>\n<p>I’ve added a node script to measure the speed of <em>npm install</em> &#x26; <em>npm run build</em>. I used this <a href=\"https://www.npmjs.com/package/execution-time\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm package</a> to measure and format time. </p>\n<p><strong>Time <code class=\"language-text\">npm run build</code> and <code class=\"language-text\">npm install</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>execSync<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> perf <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'execution-time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nperf<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"npm install\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//execSync(\"npm run build\");</span>\n\n<span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> perf<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>time <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<h2 id=\"the-results\"><a href=\"#the-results\" aria-label=\"the results permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The results</h2>\n<p>All seconds are an average of a couple of runs. Sometimes it was 2 seconds quicker or slower, never any big differences. </p>\n<h3 id=\"npm-install\"><a href=\"#npm-install\" aria-label=\"npm install permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm install</h3>\n<ul>\n<li><strong>Windows</strong>: ~80 seconds</li>\n<li><strong>WSL</strong>: ~55 seconds</li>\n</ul>\n<p>That makes WSL 30% faster on install. </p>\n<h3 id=\"npm-run-build\"><a href=\"#npm-run-build\" aria-label=\"npm run build permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm run build</h3>\n<p>So the build contains a couple of tasks actually, the JSS bootstrap task and the Next.js Build.\nHere the timing was more consistent, I guess because there is no dependency on download speed.</p>\n<ul>\n<li><strong>Windows</strong>: ~38 seconds</li>\n<li><strong>WSL</strong>: ~31 seconds</li>\n</ul>\n<p>So the builds on WSL run roughly 20% quicker. The difference doesn’t seem big, but when developing locally these builds need to run all the time. </p>\n<p>Conclusion, For the amount of effort it requires, I think it’s worth running the frontend of your projects in WSL.\nAs an added benefit, you will also never get any <a href=\"https://learn.microsoft.com/en-us/windows/wsl/case-sensitivity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">casing errors</a>.</p>\n<p>I used Node version 18 for the tests on a\nDell XPS, 12th generation i7, 32GB RAM</p>","timeToRead":2,"frontmatter":{"title":"Speed up Sitecore JSS Next.js local development","date":"August 25, 2023","spoiler":"When a Sitecore JSS Next.js project grows, performance on local develop can suffer easily. Let's see how running your project in WSL can help."},"fields":{"slug":"/speed-up-sitecore-jss-nextjs-local-development/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/speed-up-sitecore-jss-nextjs-local-development/","previous":{"fields":{"slug":"/block-automatically-generated-domain-azure-swa/","langKey":"en","directoryName":"block-automatically-generated-domain-azure-swa"},"frontmatter":{"title":"Block generated domains by Azure Static Web Apps"}},"next":{"fields":{"slug":"/bullet-proof-frontend-stack-2023/","langKey":"en","directoryName":"bullet-proof-frontend-stack-2023"},"frontmatter":{"title":"My frontend stack in 2023"}},"translations":[],"translatedLinks":[]}}}